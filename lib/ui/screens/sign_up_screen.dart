import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:task_manager/data/models/network_response.dart';
import 'package:task_manager/data/service/network_caller.dart';
import 'package:task_manager/data/utils/urls.dart';
import 'package:task_manager/ui/utils/app_colors.dart';
import 'package:task_manager/ui/widgets/centered_circular_progress_indicator.dart';
import 'package:task_manager/ui/widgets/screen_background.dart';
import 'package:task_manager/ui/widgets/snack_bar_message.dart';

class SignUpScreen extends StatefulWidget {
  const SignUpScreen({super.key});

  @override
  State<SignUpScreen> createState() => _SignUpScreenState();
}

class _SignUpScreenState extends State<SignUpScreen> {
  /*
  Flutter ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ø‡¶ñ‡¶® Form ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø (‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶≤‡¶ó‡¶á‡¶®, ‡¶∏‡¶æ‡¶á‡¶®-‡¶Ü‡¶™, ‡¶´‡¶ø‡¶°‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶´‡¶∞‡ßç‡¶Æ), ‡¶§‡¶ñ‡¶® ‡¶ö‡¶æ‡¶á ‡¶Ø‡ßá:

‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶†‡¶ø‡¶ï‡¶†‡¶æ‡¶ï ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‚Äî ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø (validate)

‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø

‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü‡ßá‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø

‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ Form ‡¶è‡¶∞ "State" ‡¶è‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶®‡¶ø‡ßü‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü‡•§

Flutter ‡¶è Widget ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶Ü‡¶∞ ‡¶∏‡ßá‡¶á Form ‡¶è‡¶∞ State ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ "‡¶ö‡¶æ‡¶¨‡¶ø" (Key) ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü‡•§

‡¶è‡¶á Key-‡¶ü‡¶æ‡¶á ‡¶π‡¶≤‡ßã GlobalKey<FormState>()‡•§

üß† ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶™‡¶æ‡¶∞‡¶ü‡¶æ ‡¶è‡¶Æ‡¶®:
‡¶§‡ßÅ‡¶Æ‡¶ø Form ‡¶¨‡¶æ‡¶®‡¶æ‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ Widget‡•§
‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡¶ñ‡¶® ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶ì:

Form valid ‡¶ï‡¶ø‡¶®‡¶æ?

‡¶∏‡¶¨ Field ‡¶†‡¶ø‡¶ï‡¶Æ‡¶§‡ßã fill ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ?

‡¶§‡¶ñ‡¶® ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶á ‡¶ö‡¶æ‡¶¨‡¶ø ‡¶¶‡¶ø‡ßü‡ßá Form ‡¶ï‡ßá ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡ßá‡¶∏ ‡¶ï‡¶∞‡ßã: ‚Äú‡¶π‡ßá Form, ‡¶∏‡¶¨ ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá?‚Äù

‡¶è‡¶á ‡¶ö‡¶æ‡¶¨‡¶ø-‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶ø _formKey‡•§
üìù ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶•‡¶æ‡ßü:
üîë GlobalKey<FormState> ‡¶π‡¶≤‡ßã Form ‡¶ï‡ßá ‡¶®‡¶ø‡ßü‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶¨‡¶ø‡•§
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ü‡¶æ ‡¶õ‡¶æ‡ßú‡¶æ Form validate ‡¶¨‡¶æ reset ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§

‡¶è‡¶á ‡¶ö‡¶æ‡¶¨‡¶ø ‡¶¶‡¶ø‡ßü‡ßá‡¶á ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã:

‡¶´‡¶∞‡ßç‡¶Æ‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ

‡¶´‡¶∞‡ßç‡¶Æ‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ

‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ

   */
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  final TextEditingController _emailTEController = TextEditingController();
  final TextEditingController _firstNameTEController = TextEditingController();
  final TextEditingController _lastNameTEController = TextEditingController();
  final TextEditingController _mobileTEController = TextEditingController();
  final TextEditingController _passwordTEController = TextEditingController();
  bool _isProgress = false;

  @override
  Widget build(BuildContext context) {
    TextTheme textTheme = Theme
        .of(context)
        .textTheme;
    return Scaffold(
      resizeToAvoidBottomInset: false,
      body: screenBackground(
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 82),
                Text(
                  "Join With Us",
                  style: textTheme.displaySmall?.copyWith(
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 24),
                _buildSignUpForm(),
                const SizedBox(height: 24),
                Center(child: Column(children: [_buildHaveAccountSection()])),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSignUpForm() {
    return Form(
      key: _formKey,
      child: Column(
        children: [
          TextFormField(
            controller: _emailTEController,
            keyboardType: TextInputType.emailAddress,
            autovalidateMode: AutovalidateMode.onUserInteraction,
            decoration: InputDecoration(hintText: "Email"),
            validator: (String? value) {
              if (value?.isEmpty ??
                  true) { //‡¶Ø‡¶¶‡¶ø value null ‡¶π‡ßü ‡¶Ö‡¶•‡¶¨‡¶æ value.isEmpty ‡¶π‡ßü (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶π‡ßü), ‡¶§‡¶æ‡¶π‡¶≤‡ßá true ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã‡•§
                return 'Enter valid email';
              }
              return null;
            },
          ),
          const SizedBox(height: 8),
          TextFormField(
            controller: _firstNameTEController,
            decoration: InputDecoration(hintText: "First name"),
            autovalidateMode: AutovalidateMode.onUserInteraction,
            validator: (String? value) {
              if (value?.isEmpty ??
                  true) { //‡¶Ø‡¶¶‡¶ø value null ‡¶π‡ßü ‡¶Ö‡¶•‡¶¨‡¶æ value.isEmpty ‡¶π‡ßü (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶π‡ßü), ‡¶§‡¶æ‡¶π‡¶≤‡ßá true ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã‡•§
                return 'Enter valid First Name';
              }
              return null;
            },
          ),
          const SizedBox(height: 8),
          TextFormField(
            controller: _lastNameTEController,
            autovalidateMode: AutovalidateMode.onUserInteraction,
            decoration: InputDecoration(hintText: "Last name"),
            validator: (String? value) {
              if (value?.isEmpty ??
                  true) { //‡¶Ø‡¶¶‡¶ø value null ‡¶π‡ßü ‡¶Ö‡¶•‡¶¨‡¶æ value.isEmpty ‡¶π‡ßü (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶π‡ßü), ‡¶§‡¶æ‡¶π‡¶≤‡ßá true ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã‡•§
                return 'Enter valid Last Name';
              }
              return null;
            },
          ),
          const SizedBox(height: 8),
          TextFormField(
            controller: _mobileTEController,
            keyboardType: TextInputType.phone,
            autovalidateMode: AutovalidateMode.onUserInteraction,
            decoration: InputDecoration(hintText: "Mobile"),
            validator: (String? value) {
              if (value?.isEmpty ??
                  true) { //‡¶Ø‡¶¶‡¶ø value null ‡¶π‡ßü ‡¶Ö‡¶•‡¶¨‡¶æ value.isEmpty ‡¶π‡ßü (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶π‡ßü), ‡¶§‡¶æ‡¶π‡¶≤‡ßá true ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã‡•§
                return 'Enter valid Mobile';
              }
              return null;
            },
          ),
          const SizedBox(height: 8),
          TextFormField(
            controller: _passwordTEController,
            autovalidateMode: AutovalidateMode.onUserInteraction,

            decoration: InputDecoration(hintText: "Password"),
            validator: (String? value) {
              if (value?.isEmpty ??
                  true) { //‡¶Ø‡¶¶‡¶ø value null ‡¶π‡ßü ‡¶Ö‡¶•‡¶¨‡¶æ value.isEmpty ‡¶π‡ßü (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶π‡ßü), ‡¶§‡¶æ‡¶π‡¶≤‡ßá true ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã‡•§
                return 'Enter valid Password';
              }
              return null;
            },),
          const SizedBox(height: 24),
          Visibility(
            visible: !_isProgress,
            replacement:const CenteredCircularProgressIndicator(),
            child: ElevatedButton(
              onPressed: _onTapNextButton,
              child: const Icon(
                Icons.arrow_circle_right_outlined,
                color: Colors.white,
              ),
            ),
          ),
        ],
      ),
    );
  }
  Widget _buildHaveAccountSection() {
    return RichText(
      text: TextSpan(
        style: const TextStyle(
          color: Colors.black,
          fontWeight: FontWeight.w600,
          fontSize: 14,
          letterSpacing: 0.5,
        ),
        text: "Have  Account?",
        children: [
          TextSpan(
            text: 'Sign IN',
            style: TextStyle(color: AppColors.themeColor),
            recognizer: TapGestureRecognizer()
              ..onTap = _onTapSignIn,
          ),
        ],
      ),
    );
  }

  void _onTapNextButton() {
    if (_formKey.currentState!.validate()) {
      _signUp();
    }
  }

  Future<void> _signUp() async {
    _isProgress = true;
    setState(() {});

    Map<String ,dynamic> requestBody = {
      "email":_emailTEController.text.trim(),
      "firstName":_firstNameTEController.text.trim(),
      "lastName":_lastNameTEController.text.trim(),
      "mobile" : _mobileTEController.text.trim(),
      "password": _passwordTEController.text,
      "photo": ""
    };
    NetworkResponse response = await NetworkCaller.postRequest(
      url: Urls.registration,body:requestBody, );

    if (response.isSuccess){
      _clearTextField();
      showSnackBarMessage(context,"New user created");
    } else{
      showSnackBarMessage(context, response.errorMessage,true);
    }
  }
  void _clearTextField(){
    _emailTEController.clear();
    _firstNameTEController.clear();
    _lastNameTEController.clear();
    _mobileTEController.clear();
    _passwordTEController.clear();
  }

  void _onTapSignIn() {
    Navigator.pop(context);
  }
  
  @override
  void dispose() {
    _emailTEController.dispose();
    _firstNameTEController.dispose();
    _lastNameTEController.dispose();
    _mobileTEController.dispose();
    _passwordTEController.dispose();
    super.dispose();
  }
}
